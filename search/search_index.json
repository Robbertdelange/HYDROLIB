{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 HYDROLIB is a Python package with tools for preprocessing, postprocessing and analysis of hydrodynamical data and simulation results, currently focused on (but not restricted to the D-HYDRO Suite for hydrodynamical simulations). HYDROLIB builds upon the basic D-HYDRO I/O functionality provided by the HYDROLIB-core package.","title":"Introduction"},{"location":"#introduction","text":"HYDROLIB is a Python package with tools for preprocessing, postprocessing and analysis of hydrodynamical data and simulation results, currently focused on (but not restricted to the D-HYDRO Suite for hydrodynamical simulations). HYDROLIB builds upon the basic D-HYDRO I/O functionality provided by the HYDROLIB-core package.","title":"Introduction"},{"location":"changelog/","text":"Unreleased \u00b6","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"guides/contributing/","text":"Contributing \u00b6 Tooling \u00b6 Black \u00b6 We use black as an autoformatter. It is also run during CI and will fail if it's not formatted beforehand. Isort \u00b6 We use isort as an autoformatter. Commitizen \u00b6 We use commitizen to automatically bump the version number. If you use conventional commit messages , the changelog.md is generated automatically.","title":"Contributing"},{"location":"guides/contributing/#contributing","text":"","title":"Contributing"},{"location":"guides/contributing/#tooling","text":"","title":"Tooling"},{"location":"guides/contributing/#black","text":"We use black as an autoformatter. It is also run during CI and will fail if it's not formatted beforehand.","title":"Black"},{"location":"guides/contributing/#isort","text":"We use isort as an autoformatter.","title":"Isort"},{"location":"guides/contributing/#commitizen","text":"We use commitizen to automatically bump the version number. If you use conventional commit messages , the changelog.md is generated automatically.","title":"Commitizen"},{"location":"guides/documentation/","text":"Documentation \u00b6 We use MKdocs for documentation. For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Documentation"},{"location":"guides/documentation/#documentation","text":"We use MKdocs for documentation. For full documentation visit mkdocs.org .","title":"Documentation"},{"location":"guides/documentation/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"guides/documentation/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"guides/setup/","text":"Installation \u00b6 You should be able to install HYDROLIB with: pip install hydrolib or if you prefer (especially on Windows) conda install hydrolib -c conda-forge Note If you use conda , it's advisable to install HYDROLIB within a new environment with only conda-forge as channel.","title":"Installation"},{"location":"guides/setup/#installation","text":"You should be able to install HYDROLIB with: pip install hydrolib or if you prefer (especially on Windows) conda install hydrolib -c conda-forge Note If you use conda , it's advisable to install HYDROLIB within a new environment with only conda-forge as channel.","title":"Installation"},{"location":"reference/api/","text":"API \u00b6 This is the automatically generated part of the code, based on the docstrings in modules, classes and functions. Example function \u00b6 [summary] Parameters: Name Type Description Default a float [description] required b float [description] 1.0 Returns: Type Description float [description] Source code in hydrolib/utils.py def example ( a : float , b : float = 1.0 ) -> float : \"\"\"[summary] Args: a (float): [description] b (float): [description] Returns: float: [description] \"\"\" return a * b","title":"API"},{"location":"reference/api/#api","text":"This is the automatically generated part of the code, based on the docstrings in modules, classes and functions.","title":"API"},{"location":"reference/api/#example-function","text":"[summary] Parameters: Name Type Description Default a float [description] required b float [description] 1.0 Returns: Type Description float [description] Source code in hydrolib/utils.py def example ( a : float , b : float = 1.0 ) -> float : \"\"\"[summary] Args: a (float): [description] b (float): [description] Returns: float: [description] \"\"\" return a * b","title":"Example function"},{"location":"topics/principles/","text":"First principles \u00b6 HYDROLIB-core is structured around the input and output files (I/O) of the DHYDRO suite.","title":"First principles"},{"location":"topics/principles/#first-principles","text":"HYDROLIB-core is structured around the input and output files (I/O) of the DHYDRO suite.","title":"First principles"},{"location":"tutorials/steps/","text":"First steps \u00b6 Let's import and create a first blanco model. import hydrolib as hl model = hl . models . FMModel ( name = \"testproject\" ) model . save ( dir = \"test\" )","title":"First steps"},{"location":"tutorials/steps/#first-steps","text":"Let's import and create a first blanco model. import hydrolib as hl model = hl . models . FMModel ( name = \"testproject\" ) model . save ( dir = \"test\" )","title":"First steps"}]}